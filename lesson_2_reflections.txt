What happens when you initialize a repository? Why do you need to do it?
  When you initialize a repository, it does not commit, but creates a .git file to store the meta data. You need to initialize inorder to star commiting and keep track of changes.

How is the staging area different from the working directory and the repository? What value do you think it offers?
 Staging area is like a middle ground to decide which files to add in a commit to the repository. This will give a buffer to sort out the files before commits.

How can you use the staging area to make sure you have one commit per logical change?
 We can use staging area to find out what are the logical changes made and then commit after that, so that it acts like a buffer.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
 When you wnat to create an italian version of the program or an easy mode for the program but doesnt want to make change in the main master branch, git branch is useful.

How do the diagrams help you visualize the branch structure?
 The diagrams helped to visualize how the commit is listed and which commits are listed for the given branch. It also helped to visualize which branch is not listed in the branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
 Merging two branches helps to move through the commits at a time and if the development of the feature is complete and want to add it to the master branch we use merge.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
 Automatic merges makes conflict when the git is not sure what to do with almost same lines. Merges manually is more time consuming.